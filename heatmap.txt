-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/dustin/heatmap#readme</a>
@package heatmap
@version 0.1.0.0


-- | Heatmap KML utilities.
module Graphics.Heatmap.KML

-- | Boundaries for displaying overlays.
data GeoBounds
GeoBounds :: !Double -> GeoBounds
[north, south, east, west] :: GeoBounds -> !Double

-- | Produce a KML document overlaying the document at the given URL across
--   the given geo boundaries.
kmlStr :: String -> GeoBounds -> String

-- | Generate and store a KMZ file with the given image ampped into the
--   given bounds.
mkKMZ :: Image PixelRGBA8 -> GeoBounds -> FilePath -> IO ()
instance GHC.Show.Show Graphics.Heatmap.KML.GeoBounds


-- | Generate heatmaps from PNGs using TemplateHaskell.
module Graphics.Heatmap.SchemeGen

-- | Generate a color scheme from a PNG on the filesystem.
genScheme :: String -> FilePath -> Q [Dec]

-- | Generate color schemes for all PNGs found within a given directory.
--   
--   Each scheme is named after the basename of the png that's found.
--   Additionally, a list of all the generated schemes named
--   <tt>allSchemes</tt> will be generated.
genSchemes :: FilePath -> Q [Dec]


-- | Heatmap types.
module Graphics.Heatmap.Types

-- | A Colorizer produces a pixel for a given depth.
type Colorizer = Depth -> PixelRGBA8

-- | A ColorScheme is a collection of pixels that Depths can map to.
type ColorScheme = [PixelRGBA8]

-- | Depth represents how warm a particular spot is.
--   
--   Depths as a semigroup may be added together, but can never have a
--   value larger than <a>maxBound</a>.
newtype Depth
Depth :: Word8 -> Depth

-- | Simple colorizer that uses a constant color and applies different
--   alpha values.
alphaColorizer :: PixelRGB8 -> Colorizer

-- | Colorizer that applies a ColorScheme along with the depth.
schemeColorizer :: ColorScheme -> Colorizer
instance GHC.Enum.Bounded Graphics.Heatmap.Types.Depth
instance GHC.Real.Integral Graphics.Heatmap.Types.Depth
instance GHC.Real.Real Graphics.Heatmap.Types.Depth
instance GHC.Enum.Enum Graphics.Heatmap.Types.Depth
instance GHC.Classes.Ord Graphics.Heatmap.Types.Depth
instance GHC.Num.Num Graphics.Heatmap.Types.Depth
instance GHC.Show.Show Graphics.Heatmap.Types.Depth
instance GHC.Classes.Eq Graphics.Heatmap.Types.Depth
instance GHC.Base.Semigroup Graphics.Heatmap.Types.Depth
instance GHC.Base.Monoid Graphics.Heatmap.Types.Depth


-- | Color schemes for heatmaps.
--   
--   These are all generated from a set of PNGs that might look pleasant on
--   your heatmap.
module Graphics.Heatmap.Schemes
allSchemes :: [(String, ColorScheme)]
pgaitch :: ColorScheme
pbj :: ColorScheme
omg :: ColorScheme
alphafire :: ColorScheme
classic :: ColorScheme
fire :: ColorScheme


-- | Tools for generating heatmap images.
module Graphics.Heatmap

-- | A Point as used throughout this heatmap codebase is currently limited
--   to two dimensional vectors of natural numbers.
type Point = V2 Natural

-- | Make a dot of a given size indicating presence that should begin
--   heating the map.
mkDot :: Point -> Natural -> [(Point, Depth)]

-- | Generate a heatmap image using a Colorizer and a collection of points
--   and depths.
genHeatmap :: (Natural, Natural) -> Colorizer -> [(Point, Depth)] -> Image PixelRGBA8

-- | Make a scale translator that can translate points in an arbitrarily
--   bounded two dimensional vector to our 2D vector with Natural bounds we
--   use when applying points.
mkTranslator :: RealFrac a => (V2 a, V2 a) -> (V2 Natural, V2 Natural) -> V2 a -> V2 Natural
instance (GHC.Enum.Enum a, GHC.Real.Integral a) => Graphics.Heatmap.Projector (Linear.V2.V2 a) a
